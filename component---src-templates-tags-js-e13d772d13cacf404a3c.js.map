{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","Tags","_ref","pageContext","data","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","a","createElement","map","_ref2","node","slug","fields","title","frontmatter","key","to","propTypes","PropTypes","shape","string","isRequired","number","arrayOf","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","React","createContext","object","func","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","pathname"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAMMW,EAAO,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,KACnBC,EAAQF,EAARE,IAD8BC,EAERF,EAAKG,kBAA3BC,EAF8BF,EAE9BE,MAAOC,EAFuBH,EAEvBG,WACTC,EAAeD,EAAN,SAAuC,IAAfA,EAAmB,GAAK,KAAhD,iBAAoEJ,EAApE,IAEf,OACET,EAAAe,EAAAC,cAAA,WACEhB,EAAAe,EAAAC,cAAA,UAAKF,GACLd,EAAAe,EAAAC,cAAA,UACGJ,EAAMK,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACEtB,EAAAe,EAAAC,cAAA,MAAIQ,IAAKJ,GACPpB,EAAAe,EAAAC,cAACZ,EAAA,EAAD,CAAMqB,GAAIL,GAAOE,OAKzBtB,EAAAe,EAAAC,cAACZ,EAAA,EAAD,CAAMqB,GAAG,SAAT,cAKNpB,EAAKqB,UAAY,CACfnB,YAAaoB,IAAUC,MAAM,CAC3BnB,IAAKkB,IAAUE,OAAOC,aAExBtB,KAAMmB,IAAUC,MAAM,CACpBjB,kBAAmBgB,IAAUC,MAAM,CACjCf,WAAYc,IAAUI,OAAOD,WAC7BlB,MAAOe,IAAUK,QACfL,IAAUC,MAAM,CACdT,KAAMQ,IAAUC,MAAM,CACpBL,YAAaI,IAAUC,MAAM,CAC3BN,MAAOK,IAAUE,OAAOC,aAE1BT,OAAQM,IAAUC,MAAM,CACtBR,KAAMO,IAAUE,OAAOC,iBAG1BA,iBAMIzB,YAER,IAAMP,EAAS,kCCvDtB,IAAsBmC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oCCA/C,IAAAlC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAoC,EAAA5C,EAAA,IAAA6C,EAAA7C,EAAAO,EAAAqC,GAAA5C,EAAAG,EAAAD,EAAA,sBAAA2C,EAAAxB,IAAArB,EAAA,KAa2B8C,IAAMC,cAAc,IAuDvCd,IAAUe,OACTf,IAAUE,OAAOC,WAChBH,IAAUgB,KACRhB,IAAUgB,gGClEhBC,EAAmB,SAAAtC,GAAiC,IAA9BuC,EAA8BvC,EAA9BuC,SAAUC,EAAoBxC,EAApBwC,cACpC,OAAKA,EAGEN,IAAMxB,cAAc+B,IAApBC,OAAAC,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV,MASXN,EAAiBlB,UAAY,CAC3BmB,SAAUlB,IAAUC,MAAM,CACxBuB,SAAUxB,IAAUE,OAAOC,aAC1BA,YAGUc","file":"component---src-templates-tags-js-e13d772d13cacf404a3c.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Components\r\nimport { Link, graphql } from 'gatsby';\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n  const tagHeader = `${totalCount} post${totalCount === 1 ? '' : 's'} tagged with \"${tag}\"`;\r\n\r\n  return (\r\n    <div>\r\n      <h1>{tagHeader}</h1>\r\n      <ul>\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields;\r\n          const { title } = node.frontmatter;\r\n          return (\r\n            <li key={slug}>\r\n              <Link to={slug}>{title}</Link>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n      <Link to=\"/tags\">All tags</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired,\r\n      ),\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}