{"version":3,"sources":["webpack:///./src/components/pages/Root/Posts.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/atoms/Seo/index.js","webpack:///./src/components/templates/Layout/index.js","webpack:///./src/components/atoms/Tags/index.js","webpack:///./src/utils/typography.js","webpack:///./src/components/molecules/Bio/index.js"],"names":["PostItem","_ref","node","title","react_default","a","createElement","className","styles","item","key","fields","slug","gatsby_browser_entry","style","boxShadow","to","frontmatter","date","marginBottom","dangerouslySetInnerHTML","__html","description","excerpt","Tags","tags","Posts","_ref2","posts","map","_ref3","Posts_PostItem","BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","allMarkdownRemark","edges","Layout","location","Seo","Bio","Root_Posts","React","Component","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","d","__webpack_exports__","createContext","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","propTypes","shape","pathname","lang","meta","_public_static_d_1667383364_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","metaData","name","content","property","author","concat","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","defaultProps","arrayOf","gatsby__WEBPACK_IMPORTED_MODULE_1__","_index_module_scss__WEBPACK_IMPORTED_MODULE_2__","_index_module_scss__WEBPACK_IMPORTED_MODULE_2___default","HeaderLink","siteName","Header","headerBig","headerSmall","children","root","Tag","tag","gatsby__WEBPACK_IMPORTED_MODULE_2__","link","kebabCase","GitHub","overrideThemeStyles","a.gatsby-resp-image-link","typography","Typography","rhythm","scale","_118839701","_data$site$siteMetada","social","gatsby_image_default","fixed","avatar","childImageSharp","alt","marginRight","minWidth","borderRadius","imgStyle","href","twitter"],"mappings":"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","file":"component---src-pages-index-js-2ece251178c144c263f7.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport Tags from '../../atoms/Tags';\r\n\r\nimport styles from './Posts.module.scss';\r\n\r\nconst PostItem = ({ node, title }) => (\r\n  <div className={styles.item} key={node.fields.slug}>\r\n    <h3 className={styles.title}>\r\n      <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\r\n        {title}\r\n      </Link>\r\n    </h3>\r\n    <small>{node.frontmatter.date}</small>\r\n    <p\r\n      style={{ marginBottom: '0.5em' }}\r\n      dangerouslySetInnerHTML={{\r\n        __html: node.frontmatter.description || node.excerpt,\r\n      }}\r\n    />\r\n    <Tags tags={node.frontmatter.tags} />\r\n  </div>\r\n);\r\n\r\nconst Posts = ({ posts, title }) =>\r\n  posts.map(({ node }) => {\r\n    const title = node.frontmatter.title || node.fields.slug;\r\n    return <PostItem key={node.fields.slug} node={node} title={title} />;\r\n  });\r\n\r\nexport default Posts;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Seo from '../components/atoms/Seo';\r\nimport Bio from '../components/molecules/Bio';\r\nimport Posts from '../components/pages/Root/Posts';\r\nimport Layout from '../components/templates/Layout';\r\n\r\nclass BlogIndex extends React.Component {\r\n  render() {\r\n    const { data } = this.props;\r\n    const siteTitle = data.site.siteMetadata.title;\r\n    const posts = data.allMarkdownRemark.edges;\r\n\r\n    return (\r\n      <Layout location={this.props.location} title={siteTitle}>\r\n        <Seo title=\"All posts\" />\r\n        <Bio />\r\n        <Posts posts={posts} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlogIndex;\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            description\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n\nfunction Seo({ description, lang, meta, title }) {\n  const data = useStaticQuery(query);\n  const { siteMetadata } = data.site;\n  const metaDescription = description || siteMetadata.description;\n  const metaData = [\n    { name: `description`, content: metaDescription },\n    { property: `og:title`, content: title },\n    { property: `og:description`, content: metaDescription },\n    { property: `og:type`, content: `website` },\n    { name: `twitter:card`, content: `summary` },\n    { name: `twitter:creator`, content: siteMetadata.author },\n    { name: `twitter:title`, content: title },\n    { name: `twitter:description`, content: metaDescription },\n  ].concat(meta);\n\n  return (\n    <Helmet\n      htmlAttributes={{ lang }}\n      title={title}\n      titleTemplate={`%s | ${siteMetadata.title}`}\n      meta={metaData}\n    />\n  );\n}\n\nSeo.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  description: ``,\n};\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default Seo;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport styles from './index.module.scss';\n\nconst HeaderLink = ({ title }) => (\n  <Link className={styles.siteName} to={`/`}>\n    {title}\n  </Link>\n);\n\nconst Header = ({ location, title }) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n\n  return location.pathname === rootPath ? (\n    <header>\n      <h1 className={styles.headerBig}>\n        <HeaderLink title={title} />\n      </h1>\n    </header>\n  ) : (\n    <header>\n      <h3 className={styles.headerSmall}>\n        <HeaderLink title={title} />\n      </h3>\n    </header>\n  );\n};\n\nconst Layout = ({ location, title, children }) => (\n  <div className={styles.root}>\n    <Header location={location} title={title} />\n    <main>{children}</main>\n    <footer>© 2019 by suzukalight</footer>\n  </div>\n);\n\nexport default Layout;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\n\nimport styles from './index.module.scss';\n\nconst Tag = ({ tag }) => (\n  <Link className={styles.link} to={`/tags/${kebabCase(tag)}/`}>\n    <li className={styles.tag}>{tag}</li>\n  </Link>\n);\n\nconst Tags = ({ tags }) => (\n  <ul className={styles.tags}>\n    {(tags || []).map(tag => (\n      <Tag key={tag} tag={tag} />\n    ))}\n  </ul>\n);\n\nexport default Tags;\n","import Typography from 'typography';\nimport GitHub from 'typography-theme-github';\n\nGitHub.overrideThemeStyles = () => {\n  return {\n    'a.gatsby-resp-image-link': {\n      boxShadow: `none`,\n    },\n  };\n};\n\nconst typography = new Typography(GitHub);\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles();\n}\n\nexport default typography;\nexport const rhythm = typography.rhythm;\nexport const scale = typography.scale;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Image from 'gatsby-image';\n\nimport { rhythm } from '../../../utils/typography';\n\nimport styles from './index.module.scss';\n\nconst query = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/tarako.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nconst Bio = () => {\n  const data = useStaticQuery(query);\n  const { author, social } = data.site.siteMetadata;\n\n  return (\n    <div className={styles.root}>\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p>\n        Written by <strong>{author}</strong>.<br />\n        <a href={`https://github.com/${social.twitter}`}>GitHub</a>{' '}\n        <a href={`https://twitter.com/${social.twitter}`}>Twitter</a>\n      </p>\n    </div>\n  );\n};\n\nexport default Bio;\n"],"sourceRoot":""}