{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["TagsPage","location","title","siteMetadata","tags","map","tag","key","fieldValue","to","kebabCase","totalCount","Tags","data","pageContext","site","allMarkdownRemark","allContentfulArticle","tagsMap","group","reduce","cat","Object","keys","sort","a","b","localeCompare","pageQuery"],"mappings":"6lBAQA,IAAMA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAA0BC,EAA7B,EAAaC,aAAgBD,MAASE,EAAtC,EAAsCA,KAAtC,OACf,kBAAC,IAAD,CAAQH,SAAUA,EAAUC,MAAOA,GACjC,kBAAC,IAAD,CAAKA,MAAM,WACX,kBAAC,IAAD,KACE,sCACA,4BACGE,EAAKC,KAAI,SAAAC,GAAG,OACX,wBAAIC,IAAKD,EAAIE,YACX,kBAAC,OAAD,CAAMC,GAAE,SAAWC,IAAUJ,EAAIE,YAAzB,KACLF,EAAIE,WADP,KACqBF,EAAIK,WADzB,aAiCGC,UAlBF,SAAC,GAAqC,IAAnCX,EAAkC,EAAlCA,SAAUY,EAAwB,EAAxBA,KAAwB,KAAlBC,YAC4BD,GAAQ,IAA1DE,EADwC,EACxCA,KAAMC,EADkC,EAClCA,kBAAmBC,EADe,EACfA,qBAE3BC,EADM,YAAOF,EAAkBG,OAAzB,EAAmCF,EAAqBE,QAC7CC,QAAO,SAACC,EAAKF,GAGlC,OAFKE,EAAIF,EAAMX,cAAaa,EAAIF,EAAMX,YAAc,GACpDa,EAAIF,EAAMX,aAAeW,EAAMR,WACxBU,IACN,IACGjB,EAAOkB,OAAOC,KAAKL,GACtBM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC/BrB,KAAI,SAAAE,GAAG,MAAK,CACXC,WAAYD,EACZI,WAAYO,EAAQX,OAGxB,OAAO,kBAACP,EAAD,CAAUC,SAAUA,EAAUE,aAAcY,EAAKZ,aAAcC,KAAMA,KAKvE,IAAMwB,EAAS","file":"component---src-pages-tags-js-87363994153891698b33.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\n\nimport Seo from '../components/atoms/Seo';\nimport { Layout, Centered } from '../components/templates/Layout';\n\nconst TagsPage = ({ location, siteMetadata: { title }, tags }) => (\n  <Layout location={location} title={title}>\n    <Seo title=\"すべてのタグ\" />\n    <Centered>\n      <h1>すべてのタグ</h1>\n      <ul>\n        {tags.map(tag => (\n          <li key={tag.fieldValue}>\n            <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n              {tag.fieldValue} ({tag.totalCount})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </Centered>\n  </Layout>\n);\n\nTagsPage.propTypes = {\n  location: PropTypes.object,\n  data: PropTypes.object,\n};\n\nconst Tags = ({ location, data, pageContext }) => {\n  const { site, allMarkdownRemark, allContentfulArticle } = data || {};\n  const groups = [...allMarkdownRemark.group, ...allContentfulArticle.group];\n  const tagsMap = groups.reduce((cat, group) => {\n    if (!cat[group.fieldValue]) cat[group.fieldValue] = 0;\n    cat[group.fieldValue] += group.totalCount;\n    return cat;\n  }, {});\n  const tags = Object.keys(tagsMap)\n    .sort((a, b) => a.localeCompare(b))\n    .map(key => ({\n      fieldValue: key,\n      totalCount: tagsMap[key],\n    }));\n\n  return <TagsPage location={location} siteMetadata={site.siteMetadata} tags={tags} />;\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: { frontmatter: { status: { eq: \"published\" } } }, limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n    allContentfulArticle(limit: 2000) {\n      group(field: tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}