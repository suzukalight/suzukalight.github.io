{"version":3,"sources":["webpack:///./src/pages/categories.js"],"names":["CategoriesPage","location","title","siteMetadata","categories","map","category","key","fieldValue","to","kebabCase","totalCount","Categories","data","pageContext","site","allMarkdownRemark","allContentfulArticle","categoriesMap","group","reduce","cat","Object","keys","sort","a","b","localeCompare","pageQuery"],"mappings":"4lBAQA,IAAMA,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAA0BC,EAA7B,EAAaC,aAAgBD,MAASE,EAAtC,EAAsCA,WAAtC,OACrB,kBAAC,IAAD,CAAQH,SAAUA,EAAUC,MAAOA,GACjC,kBAAC,IAAD,CAAKA,MAAM,aACX,kBAAC,IAAD,KACE,wCACA,4BACGE,EAAWC,KAAI,SAAAC,GAAQ,OACtB,wBAAIC,IAAKD,EAASE,YAChB,kBAAC,OAAD,CAAMC,GAAE,eAAiBC,IAAUJ,EAASE,YAApC,KACLF,EAASE,WADZ,KAC0BF,EAASK,WADnC,aAmCGC,UApBI,SAAC,GAAqC,IAAnCX,EAAkC,EAAlCA,SAAUY,EAAwB,EAAxBA,KAAwB,KAAlBC,YACsBD,GAAQ,IAA1DE,EAD8C,EAC9CA,KAAMC,EADwC,EACxCA,kBAAmBC,EADqB,EACrBA,qBAE3BC,EADM,YAAOF,EAAkBG,OAAzB,EAAmCF,EAAqBE,QACvCC,QAAO,SAACC,EAAKF,GAGxC,OAFKE,EAAIF,EAAMX,cAAaa,EAAIF,EAAMX,YAAc,GACpDa,EAAIF,EAAMX,aAAeW,EAAMR,WACxBU,IACN,IACGjB,EAAakB,OAAOC,KAAKL,GAC5BM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC/BrB,KAAI,SAAAE,GAAG,MAAK,CACXC,WAAYD,EACZI,WAAYO,EAAcX,OAG9B,OACE,kBAACP,EAAD,CAAgBC,SAAUA,EAAUE,aAAcY,EAAKZ,aAAcC,WAAYA,KAM9E,IAAMwB,EAAS","file":"component---src-pages-categories-js-792d6b54008141bbc08d.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\n\nimport Seo from '../components/atoms/Seo';\nimport { Layout, Centered } from '../components/templates/Layout';\n\nconst CategoriesPage = ({ location, siteMetadata: { title }, categories }) => (\n  <Layout location={location} title={title}>\n    <Seo title=\"すべてのカテゴリ\" />\n    <Centered>\n      <h1>すべてのカテゴリ</h1>\n      <ul>\n        {categories.map(category => (\n          <li key={category.fieldValue}>\n            <Link to={`/categories/${kebabCase(category.fieldValue)}/`}>\n              {category.fieldValue} ({category.totalCount})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </Centered>\n  </Layout>\n);\n\nCategoriesPage.propTypes = {\n  location: PropTypes.object,\n  data: PropTypes.object,\n};\n\nconst Categories = ({ location, data, pageContext }) => {\n  const { site, allMarkdownRemark, allContentfulArticle } = data || {};\n  const groups = [...allMarkdownRemark.group, ...allContentfulArticle.group];\n  const categoriesMap = groups.reduce((cat, group) => {\n    if (!cat[group.fieldValue]) cat[group.fieldValue] = 0;\n    cat[group.fieldValue] += group.totalCount;\n    return cat;\n  }, {});\n  const categories = Object.keys(categoriesMap)\n    .sort((a, b) => a.localeCompare(b))\n    .map(key => ({\n      fieldValue: key,\n      totalCount: categoriesMap[key],\n    }));\n\n  return (\n    <CategoriesPage location={location} siteMetadata={site.siteMetadata} categories={categories} />\n  );\n};\n\nexport default Categories;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: { frontmatter: { status: { eq: \"published\" } } }, limit: 2000) {\n      group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n    }\n    allContentfulArticle(limit: 2000) {\n      group(field: category) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}